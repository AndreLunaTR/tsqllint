<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var ClassName = "CrossDatabaseRule";
var RuleName = "cross-database";
var RuleText = "Cross database queries can cause performance problems, and are discouraged";
#>
using System;
using Microsoft.SqlServer.TransactSql.ScriptDom;
using TSQLLint.Lib.Rules.Interface;

namespace TSQLLint.Lib.Rules
{
    public class <#= ClassName #> : TSqlFragmentVisitor, ISqlRule
    {
        public string RULE_NAME
        {
            get
            {
                return "<#= RuleName #>";
            }
        }

        public string RULE_TEXT
        {
            get
            {
                return "<#= RuleText #>";
            }
        }

        private readonly Action<string, string, int, int> ErrorCallback;

        public <#= ClassName #>(Action<string, string, int, int> errorCallback)
        {
            ErrorCallback = errorCallback;
        }

        public override void Visit(FunctionCall node)
        {
            ErrorCallback(RULE_NAME, RULE_TEXT, node.StartLine, node.StartColumn);
        }
    }
}

namespace TSQLLint.Tests.UnitTests.Rules
{
    public class <#= ClassName #>RuleTests
    {
        private static readonly object[] testCases =
        {
            new object[]
            {
                "<#= RuleName #>", "<#= RuleName #>-no-error",  typeof(CrossDatabaseRule), new List<RuleViolation>()
            },
            new object[]
            {
                "<#= RuleName #>", "<#= RuleName #>-one-error",  typeof(CrossDatabaseRule), new List<RuleViolation>()
                {
                    new RuleViolation(ruleName: "<#= RuleName #>", startLine: 1, startColumn: 17)
                }
            }
        };

        [Test, TestCaseSource("testCases")]
        public void TestRule(string rule, string testFileName, Type ruleType, List<RuleViolation> expectedRuleViolations)
        {
            RulesTestHelper.RunRulesTest(rule, testFileName, ruleType, expectedRuleViolations);
        }
    }
}
